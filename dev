#!/bin/sh

# Based on https://github.com/shipping-docker/vessel

# Make sure we have our default command
# ./develop

# Make sure we pass-thru to docker-compose for
# un-defined helpers
# ./develop ps
# ./develop up -d

# Install composer deps
# ./develop composer install

# Run phpunit
# ./develop test

# Install node_modules dependencies
# ./develop npm install

# Run gulp tasks
# ./develop gulp

UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    MINGW64_NT-10.0*)   MACHINE=mingw64;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported system type"
    echo "System must be a Macintosh, Linux or Windows"
    echo ""
    echo "System detection determined via uname command"
    echo "If the following is empty, could not find uname command: $(which uname)"
    echo "Your reported uname is: $(uname -s)"
fi

# Set environment variables for dev
if [ "$MACHINE" == "linux" ]; then
    if grep -q Microsoft /proc/version; then # WSL
        export XDEBUG_HOST=10.0.75.1
    else
        if [ "$(command -v ip)" ]; then
            export XDEBUG_HOST=$(ip addr show docker0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
        else
            export XDEBUG_HOST=$(ifconfig docker0 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1)
        fi
    fi
    SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export XDEBUG_HOST=$(ipconfig getifaddr en0) # Ethernet

    if [ -z "$XDEBUG_HOST" ]; then
        export XDEBUG_HOST=$(ipconfig getifaddr en1) # Wifi
    fi
    SEDCMD="sed -i .bak"
elif [ "$MACHINE" == "mingw64" ]; then # Git Bash
    export XDEBUG_HOST=10.0.75.1
    SEDCMD="sed -i"
fi

#change current dir because docker only read .env in current docker-compose file dir
cd .docker
BUILD="./build"
DOCKER="docker"
COMPOSE="docker-compose -f ./docker-compose.yml"
WORKDIR="//var//www//html"
export COMPOSE_CONVERT_WINDOWS_PATHS=1

# Is the environment running
PSRESULT="$(docker-compose ps -q)"
if [ ! -z "$PSRESULT" ]; then
    EXEC="yes"
    echo "Container is running"
else
    EXEC="no"
    echo "Container is NOT running"
fi

# if we pass any arguments...
if [ $# -gt 0 ]; then
    # if "clean" is used, stop services em remove containers
    if [ "$1" == "clean" ]; then
        shift 1
        $COMPOSE stop && $COMPOSE rm -f

    # if "build" is used, pass-thru to "build" inside .docker
    elif [ "$1" == "build" ]; then
        shift 1
        $BUILD "$@"       
    
    # if "destroy" is used, stop services, remove containers and remove volumes
    elif [ "$1" == "destroy" ]; then
        shift 1
        $COMPOSE stop && $COMPOSE rm -f
        $DOCKER volume rm $( $DOCKER volume ls -qf dangling=true )
    
    # if "artisan" is used, pass-thru to "artisan"
    elif [ "$1" == "bash" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec app bash
        else
            $COMPOSE run --rm -w $WORKDIR app bash
        fi

    # if "artisan" is used, pass-thru to "artisan"
    elif [ "$1" == "php" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec app php "$@"
        else
            $COMPOSE run --rm -w $WORKDIR app php "$@"
        fi    

    # if "artisan" is used, pass-thru to "artisan"
    elif [ "$1" == "artisan" ]; then
        shift 1     
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec app php artisan "$@"
        else
            $COMPOSE run --rm -w $WORKDIR app php artisan "$@"
        fi    

    # If "composer" is used, pass-thru to "composer"
    # inside a new container
    elif [ "$1" == "composer" ]; then
        shift 1     
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec app composer "$@"
        else
            $COMPOSE run -u root --rm -w $WORKDIR app composer "$@"
        fi

    # If "test" is used, run unit tests,
    # pass-thru any extra arguments to php-unit
    elif [ "$1" == "test" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec app ./vendor/bin/phpunit "$@"
        else
            $COMPOSE run -w $WORKDIR app ./vendor/bin/phpunit "$@"
        fi        

    # If "node" is used, run commands inside node-vue-cli container
    elif [ "$1" == "node" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-vue-cli "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-vue-cli "$@"
        fi       
        

    # If "vue" is used, run vue from node-vue-cli container
    elif [ "$1" == "vue" ]; then
        shift 1        
        $COMPOSE run --rm -w $WORKDIR node-vue-cli vue "$@"        
    
    # If "angular" is used, run angular from node-angular-cli container
    elif [ "$1" == "angular" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-angular-cli ng "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-angular-cli ng "$@"
        fi        
        
    # If "npm" is used, run npm
    # from our node container
    elif [ "$1" == "npm" ]; then        
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-vue-cli npm "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-vue-cli npm "$@"   
        fi
         
    # If "yarn" is used, run yarn
    # from our node container
    elif [ "$1" == "yarn" ]; then        
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-vue-cli yarn "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-vue-cli yarn "$@"
        fi
    
    # If "gulp" is used, run gulp from node-vue-cli container
    elif [ "$1" == "gulp" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-vue-cli gulp "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-vue-cli gulp "$@"
        fi        
    
    # If "webpack" is used, run webpack from node-vue-cli container
    elif [ "$1" == "webpack" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec node-vue-cli webpack "$@"
        else
            $COMPOSE run --rm -w $WORKDIR node-vue-cli webpack "$@"
        fi     
       
    # Else, pass-thru args to docker-compose
    else
        $COMPOSE "$@"
    fi
else
    $COMPOSE "$@"
fi